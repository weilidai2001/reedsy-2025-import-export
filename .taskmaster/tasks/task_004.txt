# Task ID: 4
# Title: Implement Scheduler Service
# Status: done
# Dependencies: 2
# Priority: high
# Description: Develop the Scheduler service that will manage in-memory FIFO queues for different job types and dispatch jobs to Handlers.
# Details:
Create an Express application for the Scheduler service with a BullMQ-like interface. Implement the POST `/queue` endpoint to enqueue jobs. Create separate in-memory queues for each job type (epub, pdf, word, wattpad, evernote).

Implement queue management logic:
```javascript
const queues = {
  import: {
    word: [],
    pdf: [],
    wattpad: [],
    evernote: []
  },
  export: {
    epub: [],
    pdf: []
  }
};

// Enqueue function
function enqueue(job) {
  queues[job.direction][job.type].push(job);
}

// Dequeue function
function dequeue(direction, type) {
  return queues[direction][type].shift();
}
```

Implement job dispatching to Handler services. Add Swagger UI at `/docs` endpoint.

# Test Strategy:
Test queue operations with various job types. Verify FIFO behavior. Test concurrent enqueue/dequeue operations. Verify job dispatching to Handler services works correctly.

# Subtasks:
## 1. Scaffold Scheduler Service [done]
### Dependencies: None
### Description: Set up the initial project structure, TypeScript config, and Express boilerplate for the Scheduler microservice.
### Details:
- Create the scheduler directory under services/
- Add package.json, tsconfig.json, and .gitignore
- Set up Express app with a health check endpoint
- Add Jest for testing
- Ensure shared/types.ts is available for type imports
- Use kebab-case for all files and directories


## 2. Add/Configure TypeScript and Jest [done]
### Dependencies: None
### Description: Add tsconfig.json, jest.config.js, and ensure TypeScript and Jest are configured for the Scheduler service.
### Details:
- Create tsconfig.json in services/scheduler
- Add jest.config.js and configure Jest for TypeScript
- Add test script to package.json
- Ensure devDependencies include typescript, jest, ts-jest, @types/jest, @types/node
- Use kebab-case for all files


## 3. Set up Express app and entry points [done]
### Dependencies: None
### Description: Add Express app boilerplate, server starter, and entry point for the Scheduler service.
### Details:
- Create src/app.ts with Express app and middleware
- Create src/server.ts to start the app on a port
- Create src/index.ts as entry point
- Use kebab-case for all files


## 4. Verify shared types import and paths [done]
### Dependencies: None
### Description: Test import of types from services/shared/types.ts in Scheduler service to ensure path aliasing works.
### Details:
- Add sample import of Job type from shared/types.ts
- Fix tsconfig.json paths if needed
- Ensure no TypeScript errors


## 5. Add health check endpoint and test [done]
### Dependencies: None
### Description: Add a health check endpoint and test for the Scheduler service.
### Details:
- Add GET /health endpoint to app
- Add Jest test to verify health endpoint returns 200 OK


